name: RSS 알림 스케줄러

# 스케줄링 설정
on:
  schedule:
    # KST 09:00 = UTC 00:00
    # - cron: '0 0 * * *'
    # KST 12:00 = UTC 03:00
    # - cron: '0 3 * * *'
    # KST 15:00 = UTC 06:00
    # - cron: '0 6 * * *'
    # KST 18:00 = UTC 09:00
    # - cron: '0 9 * * *'
    - cron: '*/10 * * * *'
  
  # 수동 실행 허용
  workflow_dispatch:
    inputs:
      mode:
        description: '실행 모드'
        required: false
        default: 'once'
        type: choice
        options:
          - 'once'

# 환경 변수 설정
env:
  TZ: Asia/Seoul
  NODE_ENV: production
  LOG_LEVEL: debug  # 디버그 로그 활성화

jobs:
  rss-notification:
    runs-on: ubuntu-latest
    
    # Environment 설정
    environment: production
    
    # 타임아웃 설정 (30분)
    timeout-minutes: 30
    
    steps:
      # 코드 체크아웃
      - name: 코드 체크아웃
        uses: actions/checkout@v4
      
      # pnpm 설치 (프로젝트에서 사용하는 패키지 매니저)
      - name: pnpm 설치
        uses: pnpm/action-setup@v4
        with:
          version: 10.14.0
      
      # Node.js 환경 설정
      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      # 오늘 날짜 설정 (캐시 키용)
      - name: 날짜 설정
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      # 의존성 설치
      - name: 의존성 설치
        run: pnpm install --frozen-lockfile
      
      # RSS 캐시 복원
      - name: RSS 캐시 복원
        id: cache
        uses: actions/cache@v4
        with:
          path: .cache
          key: rss-daily-cache-${{ steps.date.outputs.date }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            rss-daily-cache-${{ steps.date.outputs.date }}-
            rss-daily-cache-
      
      # 캐시 디렉토리 생성 (캐시가 없는 경우)
      - name: 캐시 디렉토리 생성
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache
          echo '{}' > .cache/rss-daily-cache.json
          echo "📂 캐시 디렉토리 및 파일 생성 완료"
      
      # 환경 변수 파일 생성 (Secrets과 Variables 모두 사용)
      - name: 환경 변수 설정
        run: |
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN || vars.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID || vars.TELEGRAM_CHAT_ID }}" >> .env
          echo "WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET || vars.WEBHOOK_SECRET }}" >> .env
          echo "NODE_ENV=production" >> .env
          echo "LOG_LEVEL=info" >> .env
          echo "TZ=Asia/Seoul" >> .env
          echo "PORT=3000" >> .env
          echo "RSS_SCHEDULE_CRON=30 8 * * *" >> .env
          echo "CI=true" >> .env

      # 환경 변수 확인 (디버깅용)
      - name: 환경 변수 확인
        run: |
          echo "📋 환경 변수 설정 확인:"
          echo "   - Environment: production"
          echo "   - NODE_ENV: $NODE_ENV"
          echo "   - LOG_LEVEL: $LOG_LEVEL"
          echo "   - TZ: $TZ"
          echo "   - TELEGRAM_BOT_TOKEN: $(if [ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then echo "✅ secrets에서 설정됨"; elif [ -n "${{ vars.TELEGRAM_BOT_TOKEN }}" ]; then echo "⚠️ vars에서 설정됨"; else echo "❌ 누락"; fi)"
          echo "   - TELEGRAM_CHAT_ID: $(if [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then echo "✅ secrets에서 설정됨"; elif [ -n "${{ vars.TELEGRAM_CHAT_ID }}" ]; then echo "⚠️ vars에서 설정됨"; else echo "❌ 누락"; fi)"
          echo "   - 실행 모드: ${{ github.event_name }}"
          echo "   - 실행 시간: $(date +'%Y-%m-%d %H:%M:%S %Z')"

      # RSS 알림 실행
      - name: RSS 알림 실행
        run: |
          # CI 환경 변수 확인 (파일 캐시 모드 작동)
          export CI=true
          
          # 스케줄 트리거 또는 수동 실행 감지
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "⏰ 스케줄 실행"
            echo "📅 필터 날짜: 최근 3일"
            echo "💾 캐시 모드: 파일 (CI=true)"
            # 스케줄 실행 시에는 --once 옵션 제거하여 캐시가 정상 작동하도록 함
            node index.js --filter-days=3
          else
            echo "🚀 수동 실행 모드"
            echo "📅 필터 날짜: 최근 3일"
            echo "💾 캐시 모드: 파일 (CI=true)"
            # 수동 실행도 캐시를 사용하도록 함
            node index.js --filter-days=3
          fi
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || vars.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID || vars.TELEGRAM_CHAT_ID }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET || vars.WEBHOOK_SECRET }}
      
      # 캐시 파일 상태 확인 (디버깅용)
      - name: 캐시 파일 상태 확인
        if: always()
        run: |
          echo "📂 캐시 파일 확인:"
          if [ -f .cache/rss-daily-cache.json ]; then
            echo "   - 캐시 파일 존재 ✅"
            echo "   - 파일 크기: $(du -h .cache/rss-daily-cache.json | cut -f1)"
            echo "   - 캐시 내용 예시:"
            # JSON 파일의 처음 부분 확인
            head -n 20 .cache/rss-daily-cache.json | jq '.' 2>/dev/null || echo "     빈 캐시 또는 형식 오류"
            
            # 캐시 통계
            echo "   - 캐시 통계:"
            CACHE_SIZE=$(jq 'to_entries | map(.value | length) | add' .cache/rss-daily-cache.json 2>/dev/null || echo "0")
            echo "     총 캐시된 항목: ${CACHE_SIZE}개"
          else
            echo "   - 캐시 파일 없음 ⚠️"
            echo "   - 새로운 실행이거나 캐시가 초기화된 상태"
          fi
      
      # 캐시 저장 (다음 실행을 위해)
      - name: 캐시 저장
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .cache
          key: rss-daily-cache-${{ steps.date.outputs.date }}-${{ hashFiles('**/package.json') }}
      
      # 실행 완료 로그
      - name: 실행 완료 알림
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ RSS 알림 실행 완료"
            echo "📊 실행 요약:"
            echo "   - 실행 시간: $(date +'%Y-%m-%d %H:%M:%S %Z')"
            echo "   - 실행 모드: ${{ github.event_name }}"
            echo "   - 작업 상태: 성공"
          else
            echo "❌ RSS 알림 실행 실패"
            echo "   - 오류 발생 시점을 확인하세요"
          fi
